'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isObject = exports.isFunction = exports.parseBody = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var parseBody = exports.parseBody = function parseBody(response) {
  var mapping = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var contentType = response.headers.get('Content-Type');

  // Do not attempt to parse empty response
  if (contentType === null) {
    return Promise.resolve(null);
  }

  var mimeType = contentType.split(';')[0].trim();

  if (mimeType in mapping) {
    // Direct mapping of `Content-Type`/`mimeType` to response handler
    return mapping[mimeType](response);
  } else if (mimeType === 'application/json' || mimeType === 'text/json' || /\+json$/.test(mimeType) // ends with "+json"
  ) {
      // https://mimesniff.spec.whatwg.org/#json-mime-type
      return 'json' in mapping ? mapping['json'](response) : response.json();
    } else if (mimeType === 'text/html') {
    // https://mimesniff.spec.whatwg.org/#html-mime-type
    return 'html' in mapping ? mapping['html'](response) : response.text();
  } else if (mimeType === 'application/xml' || mimeType === 'text/xml' || /\+xml$/.test(mimeType) // ends with "+xml"
  ) {
      // https://mimesniff.spec.whatwg.org/#xml-mime-type
      return 'xml' in mapping ? mapping['xml'](response) : response.text();
    } else {
    return 'other' in mapping ? mapping['other'](response) : response.arrayBuffer();
  }
};

var isFunction = exports.isFunction = function isFunction(value) {
  return typeof value === 'function';
};
var isObject = exports.isObject = function isObject(value) {
  return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object';
};