"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SimpleCache = function () {
  function SimpleCache() {
    _classCallCheck(this, SimpleCache);

    this.cache = {};
  }

  _createClass(SimpleCache, [{
    key: "get",
    value: function get(url) {
      return this.cache[url];
    }
  }, {
    key: "set",
    value: function set(url, promise) {
      var _this = this;

      this.cache[url] = promise;

      promise.then(function (_ref) {
        var error = _ref.error;

        if (error) {
          _this.remove(url);
        }
      });
    }
  }, {
    key: "remove",
    value: function remove(url) {
      delete this.cache[url];
    }
  }, {
    key: "clear",
    value: function clear() {
      // TODO: Wait for all outstanding promises to resolve?
      //   `Promise.all(Object.values(cache)).then(() => this.cache = {})` (untested)
      this.cache = {};
    }
  }]);

  return SimpleCache;
}();

exports.default = SimpleCache;